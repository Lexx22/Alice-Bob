/*
 * Без имени.c
 * 
 * Copyright 2014 Lex <lex22@ubuntu>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * 
 */


// Alice a, p, q
// Bob b, p, q
// A = p^a mod q, B = p^b mod
// Key = p^b mod q
// a || b - ?

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include "mini-gmp.c"

#define thread_count 4

mpz_t A, B, p, q, key;
pthread_mutex_t mutex;
pthread_cond_t cond;
pthread_t threads[thread_count];

void key_found(mpz_t a){
	pthread_mutex_lock(&mutex);
	mpz_powm(key, B, a, q);
	pthread_t self_id = pthread_self();
	pthread_cond_signal(&cond);
	int i = 0;
	for(i = 0; i < thread_count; ++i){
		if(!pthread_equal(threads[i], self_id)){
			pthread_cancel(threads[i]);
		}
	}
	pthread_mutex_unlock(&mutex);
}

 
 /*
 
 mpz_t num;
 mpz_init(num); // num = 0;
 mpz_clear(num);
 mpz_powm(res, num, exp, mod);// res = num ^ exp % mod;
 mpz_init_set_str(num, str, 10);
 mpz_out_str(stdout, num, 10);
 mpz_t add(res, num1, num2); // res = num1 + num2
 
 */

 /*
 pthread_mutex_unlock(&mutex);
 pthread_mutex_trylock(&mutex);
 pthread_mutex_destroy(&mutex);
 
 pthread_cond_t cond;
 pthread_cond_init(&cond, NULL);
 pthread_cond_signal(&cond);
 pthread_cond_broadcast(&cond);
 pthread_cond_wait(&cond, &mutex);
 
 pthread_cond_destroy(&cond);
 
 */

void *calc(void *pointer){
	//will change
	int id = *(int *)pointer;
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	mpz_t left, right;
	mpz_init_set_ui(left, 1000 * id);
	mpz_init_set_ui(right, 1000 * id);
	mpz_add(right, right, left);
	mpz_t i;
	mpz_init_set(i, left);
	mpz_t tmp;
	mpz_init(tmp);
	while (1) {
		while(mpz_cmp(i, right) != 0){
			mpz_powm(tmp, p, i, q);
			if(mpz_cmp(tmp,A) == 0){
				key_found(i);
				break;
			}
			mpz_add_ui(i, i, 1);
		}
		mpz_add_ui(left, left, 1000 * id);
		mpz_add_ui(right, right, 1000 * id);
	}
	mpz_clear(tmp);
	mpz_clear(left);
	mpz_clear(right);
	mpz_clear(i);
	pthread_exit(NULL);
}

int main(int argc, char **argv){
	if(argc != 5){
		fprintf(stderr, "ERROR\n");
		exit(1);
	}
	mpz_t a, b;
	mpz_init_set_str(a, argv[1], 10);
	mpz_init_set_str(b, argv[2], 10);
	mpz_init_set_str(p, argv[3], 10);
	mpz_init_set_str(q, argv[4], 10);
	mpz_init(key);
	mpz_init(A);
	mpz_init(B);
	
	mpz_powm(A, p, a, q);
	mpz_powm(B, p, b, q);
	
	mpz_clear(a);
	mpz_clear(b);
	
	int id[thread_count];
	int i = 0;
	pthread_mutex_init(&mutex, NULL);
	pthread_cond_init(&cond, NULL);
	pthread_mutex_lock(&mutex);
	
	for(i = 0; i < thread_count; ++i){
		id[i] = i;
		pthread_create(&threads[i], NULL, calc, &id[i]);
	}
	pthread_cond_wait(&cond, &mutex);
	mpz_out_str(stdout, 10, key);
	putchar('\n');
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);	
	mpz_clear(A);
	mpz_clear(B);
	mpz_clear(p);
	mpz_clear(q);
	mpz_clear(key);
	return 0;
}

// Test 1: 28 12 17 29
// (a = 10, b = 15, KEY = 28)
